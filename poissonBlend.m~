function [ im_blend ] = poissonBlend( im_source, mask, im_bg )
%POISSONBLEND

[source_h, source_w, ~] = size(im_source);
[bg_h, bg_w, ~] = size(im_bg);

source_pixel_count = source_h * source_w;
bg_pixel_count = bg_h * bg_w;
im2var = zeros(bg_h, bg_w);
im2var(1:bg_pixel_count) = 1:bg_pixel_count;

% Number of identity equations
num_equations = bg_pixel_count - source_pixel_count;
% Number of blending equations
num_equations = num_equations + 4*(source_pixel_count);

v_rgb = {};

for channel = 1:3
  % A and b have extra zero rows at the bottom because
  % of edge cases around the edges of the background image
  %   A = sparse([], [], [], num_equations, bg_pixel_count);  
  
  % Identity matrix part req. 1 per row, rest req. 2 per
%   sparse_vec_size = (bg_pixel_count - source_pixel_count) + 2*4*(source_pixel_count);
%   sparse_i = zeros(1, sparse_vec_size);
%   sparse_j = zeros(1, sparse_vec_size);
%   sparse_k = zeros(1, sparse_vec_size);
%   i_count = 1;
%   j_count = 1;
%   k_count = 1;
%   sparse_vec_size    
  sparse_i = [];
  sparse_j = [];
  sparse_k = [];
  b = zeros(num_equations, 1);
  
  e = 1; % Equation counter
  
  % Loop over background image
  for y = 1:bg_h
    for x = 1:bg_w
      % Loop over channels
      if ~mask(y,x)
        % Just background
        
        % A(e, im2var(y,x)) = 1;
%         sparse_i(i_count) = e;
%         sparse_j(j_count) = im2var(y,x);
%         sparse_k(k_count) = 1;
%         i_count = i_count + 1;
%         j_count = j_count + 1;
%         k_count = k_count + 1;
        sparse_i = [sparse_i e];
        sprase
        
        
        b(e) = im_bg(y, x, channel);
        e = e + 1;
      else
        % Neighbor Equations
        % A(e, im2var(y,x)) = 1;        % signs?
        sparse_i(i_count) = e;
        sparse_j(j_count) = im2var(y,x);
        sparse_k(k_count) = 1;
        i_count = i_count + 1;
        j_count = j_count + 1;
        k_count = k_count + 1;
        
        % Up
        if y ~= 1   
          % A(e, im2var(y-1,x)) = -1;
          sparse_i(i_count) = e;
          sparse_j(j_count) = im2var(y-1,x);
          sparse_k(k_count) = -1;
          i_count = i_count + 1;
          j_count = j_count + 1;
          k_count = k_count + 1;
          
          b(e) = im_source(y,x) - im_source(y-1,x);
          e = e + 1;
        end
        
        % Down
        if y ~= bg_h          
          % A(e, im2var(y+1,x)) = -1;
          sparse_i(i_count) = e;
          sparse_j(j_count) = im2var(y+1,x);
          sparse_k(k_count) = -1;
          i_count = i_count + 1;
          j_count = j_count + 1;
          k_count = k_count + 1;
          
          b(e) = im_source(y,x) - im_source(y+1,x);
          e = e + 1;
        end
        
        % Right
        if x ~= bg_w
          % A(e, im2var(y,x+1)) = -1;
          sparse_i(i_count) = e;
          sparse_j(j_count) = im2var(y,x+1);
          sparse_k(k_count) = -1;
          i_count = i_count + 1;
          j_count = j_count + 1;
          k_count = k_count + 1;
          
          b(e) = im_source(y,x) - im_source(y,x+1);
          e = e + 1;
        end
        
        % Left
        if x ~= 1
          % A(e, im2var(y,x-1)) = -1;
          sparse_i(i_count) = e;
          sparse_j(j_count) = im2var(y,x-1);
          sparse_k(k_count) = -1;
          i_count = i_count + 1;
          j_count = j_count + 1;
          k_count = k_count + 1;
          
          b(e) = im_source(y,x) - im_source(y,x-1);
          e = e + 1;
        end
      end
    end
  end
  
  i_count
  j_count
  k_count
  
  A = sparse(sparse_i, sparse_j, sparse_k, num_equations, bg_pixel_count);
  v{channel} = A\b;
end

for c = 1:3
  im_blend(:,:,c) = reshape(v{c}, [bg_h bg_w]);
end

end

