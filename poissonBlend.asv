function [ im_blend ] = poissonBlend( im_source, mask, im_bg )
%POISSONBLEND

[source_h, source_w, ~] = size(im_source);
[bg_h, bg_w, ~] = size(im_bg);

source_pixel_count = source_h * source_w;
bg_pixel_count = bg_h * bg_w;
im2var = zeros(bg_h, bg_w);
im2var(1:bg_pixel_count) = 1:bg_pixel_count;

% Number of identity equations
num_equations = bg_pixel_count - source_pixel_count;
% Number of blending equations
num_equations = num_equations + 4*(source_pixel_count);

% A and b have extra zero rows at the bottom because
% of edge cases around the edges of the background image
A = sparse([], [], [], num_equations, bg_pixel_count);
b = zeros(num_equations, 1);

e = 1; % Equation counter

% Loop over background image
for y = 1:bg_h
  for x = 1:bg_w
    % Loop over channels
    for channel = 1:3
      if ~mask(y,x)
        %% Just background
        A(e, im2var(y,x)) = 1;
        b(e) = im_bg(y, x, channel);
        e = e + 1;
      else
        %% Neighbor Equations

        % Up
        if y ~= 1
          A(e, im2var(y,x)) = 1;        % signs?
          A(e, im2var(y-1,x)) = -1;
          b(e) = im_source(y,x) - im_source(y-1,x);
          e = e + 1;
        end
        
        % Down
        if y ~= bg_h
          A(e, im2var(y,x)) = 1;        
          A(e, im2var(y+1,x)) = -1;
          b(e) = im_source(y,x) - im_source(y+1,x);
          e = e + 1;
        end      
        
        % Right
        if x ~= bg_w
          A(e, im2var(y,x)) = 1;        
          A(e, im2var(y,x+1)) = -1;
          b(e) = im_source(y,x) - im_source(y,x+1);
          e = e + 1;
        end
        
        % Left
        if x ~= 1
          A(e, im2var(y,x)) = 1;        
          A(e, im2var(y,x-1)) = -1;
          b(e) = im_source(y,x) - im_source(y,x-1);
          e = e + 1;
        end
      end  
    end
  end
  % fprintf('y: %d , x: %d \n', y, x);
end

v = A\b;
%imshow(v)

im_blend(:,:,1) = reshape(v(0:bg_pixel_count), [bg_h bg_w]);
im_blend(:,:,2) = reshape(v(bg_pixel_count:2*bg_pixel_count), [bg_h bg_w]);
im_blend(:,:,3) = reshape(v(:,:,3), [bg_h bg_w]);
end

